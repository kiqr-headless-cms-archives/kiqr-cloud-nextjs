/* tslint:disable */
/* eslint-disable */
/**
 * Management API
 * Management API for KIQR Headless CMS
 *
 * The version of the OpenAPI document: 0.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Component
 */
export interface Component {
    /**
     * 
     * @type {string}
     * @memberof Component
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Component
     */
    'name': string;
    /**
     * 
     * @type {Array<ContentTypeField>}
     * @memberof Component
     */
    'fields': Array<ContentTypeField>;
}
/**
 * 
 * @export
 * @interface ContentType
 */
export interface ContentType {
    /**
     * 
     * @type {string}
     * @memberof ContentType
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ContentType
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ContentType
     */
    'kind': ContentTypeKindEnum;
    /**
     * 
     * @type {Array<ContentTypeAssociation>}
     * @memberof ContentType
     */
    'associations': Array<ContentTypeAssociation>;
    /**
     * 
     * @type {Array<ContentTypeField>}
     * @memberof ContentType
     */
    'fields': Array<ContentTypeField>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ContentType
     */
    'components'?: Array<string>;
}

export const ContentTypeKindEnum = {
    Collection: 'collection',
    Single: 'single'
} as const;

export type ContentTypeKindEnum = typeof ContentTypeKindEnum[keyof typeof ContentTypeKindEnum];

/**
 * 
 * @export
 * @interface ContentTypeAssociation
 */
export interface ContentTypeAssociation {
    /**
     * 
     * @type {string}
     * @memberof ContentTypeAssociation
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ContentTypeAssociation
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof ContentTypeAssociation
     */
    'to': string;
}
/**
 * 
 * @export
 * @interface ContentTypeField
 */
export interface ContentTypeField {
    /**
     * 
     * @type {string}
     * @memberof ContentTypeField
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ContentTypeField
     */
    'component'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentTypeField
     */
    'label'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentTypeField
     */
    'type'?: ContentTypeFieldTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ContentTypeField
     */
    'repeatable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ContentTypeField
     */
    'required'?: boolean;
}

export const ContentTypeFieldTypeEnum = {
    String: 'string',
    Text: 'text',
    Editor: 'editor'
} as const;

export type ContentTypeFieldTypeEnum = typeof ContentTypeFieldTypeEnum[keyof typeof ContentTypeFieldTypeEnum];

/**
 * 
 * @export
 * @interface CreateProjectRequest
 */
export interface CreateProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateProjectRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateResourceRequest
 */
export interface CreateResourceRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateResourceRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateResourceRequest
     */
    'slug'?: string;
    /**
     * 
     * @type {object}
     * @memberof CreateResourceRequest
     */
    'content'?: object;
    /**
     * 
     * @type {string}
     * @memberof CreateResourceRequest
     */
    'content_type': string;
}
/**
 * 
 * @export
 * @interface CreateSchemaRequest
 */
export interface CreateSchemaRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateSchemaRequest
     */
    'message': string;
    /**
     * 
     * @type {object}
     * @memberof CreateSchemaRequest
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface Environment
 */
export interface Environment {
    /**
     * 
     * @type {string}
     * @memberof Environment
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Environment
     */
    'project_id': string;
    /**
     * 
     * @type {string}
     * @memberof Environment
     */
    'schema_id': string;
    /**
     * 
     * @type {string}
     * @memberof Environment
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Environment
     */
    'slug': string;
    /**
     * 
     * @type {boolean}
     * @memberof Environment
     */
    'promote_new_schemas'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Environment
     */
    'updated_at': number;
    /**
     * 
     * @type {number}
     * @memberof Environment
     */
    'created_at': number;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'slug': string;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'environments_count': number;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'schemas_count': number;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'updated_at': number;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'created_at': number;
}
/**
 * 
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'project_id': string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'environment_id': string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'content_type': string;
    /**
     * 
     * @type {object}
     * @memberof Resource
     */
    'content': object;
    /**
     * 
     * @type {number}
     * @memberof Resource
     */
    'version': number;
    /**
     * 
     * @type {number}
     * @memberof Resource
     */
    'versions_count': number;
    /**
     * 
     * @type {number}
     * @memberof Resource
     */
    'updated_at': number;
    /**
     * 
     * @type {number}
     * @memberof Resource
     */
    'created_at': number;
}
/**
 * 
 * @export
 * @interface ResourcesResponse
 */
export interface ResourcesResponse {
    /**
     * 
     * @type {Array<Resource>}
     * @memberof ResourcesResponse
     */
    'results': Array<Resource>;
    /**
     * 
     * @type {ResponseMeta}
     * @memberof ResourcesResponse
     */
    'meta': ResponseMeta;
}
/**
 * 
 * @export
 * @interface ResponseMeta
 */
export interface ResponseMeta {
    /**
     * 
     * @type {ResponseMetaPagination}
     * @memberof ResponseMeta
     */
    'pagination'?: ResponseMetaPagination;
}
/**
 * 
 * @export
 * @interface ResponseMetaPagination
 */
export interface ResponseMetaPagination {
    /**
     * 
     * @type {number}
     * @memberof ResponseMetaPagination
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof ResponseMetaPagination
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof ResponseMetaPagination
     */
    'items': number;
    /**
     * 
     * @type {number}
     * @memberof ResponseMetaPagination
     */
    'pages': number;
    /**
     * 
     * @type {number}
     * @memberof ResponseMetaPagination
     */
    'from'?: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseMetaPagination
     */
    'to'?: number;
}
/**
 * 
 * @export
 * @interface Schema
 */
export interface Schema {
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    'project_id': string;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    'user_id': string;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    'updated_at': number;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    'created_at': number;
}
/**
 * 
 * @export
 * @interface SchemaExtended
 */
export interface SchemaExtended {
    /**
     * 
     * @type {string}
     * @memberof SchemaExtended
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof SchemaExtended
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof SchemaExtended
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof SchemaExtended
     */
    'project_id': string;
    /**
     * 
     * @type {string}
     * @memberof SchemaExtended
     */
    'user_id': string;
    /**
     * 
     * @type {number}
     * @memberof SchemaExtended
     */
    'updated_at': number;
    /**
     * 
     * @type {number}
     * @memberof SchemaExtended
     */
    'created_at': number;
    /**
     * 
     * @type {SchemaExtendedData}
     * @memberof SchemaExtended
     */
    'data': SchemaExtendedData;
}
/**
 * 
 * @export
 * @interface SchemaExtendedData
 */
export interface SchemaExtendedData {
    /**
     * 
     * @type {Array<ContentType>}
     * @memberof SchemaExtendedData
     */
    'content_types': Array<ContentType>;
    /**
     * 
     * @type {Array<Component>}
     * @memberof SchemaExtendedData
     */
    'components'?: Array<Component>;
}
/**
 * 
 * @export
 * @interface UpdateResourceRequest
 */
export interface UpdateResourceRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateResourceRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateResourceRequest
     */
    'slug'?: string;
    /**
     * 
     * @type {object}
     * @memberof UpdateResourceRequest
     */
    'content'?: object;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'avatar_url': string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'updated_at': number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'created_at': number;
}

/**
 * EnvironmentsApi - axios parameter creator
 * @export
 */
export const EnvironmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List the current user\'s available environments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/environments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvironmentsApi - functional programming interface
 * @export
 */
export const EnvironmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnvironmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List the current user\'s available environments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironments(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Environment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnvironments(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnvironmentsApi - factory interface
 * @export
 */
export const EnvironmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnvironmentsApiFp(configuration)
    return {
        /**
         * 
         * @summary List the current user\'s available environments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironments(options?: any): AxiosPromise<Array<Environment>> {
            return localVarFp.getEnvironments(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnvironmentsApi - object-oriented interface
 * @export
 * @class EnvironmentsApi
 * @extends {BaseAPI}
 */
export class EnvironmentsApi extends BaseAPI {
    /**
     * 
     * @summary List the current user\'s available environments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    public getEnvironments(options?: AxiosRequestConfig) {
        return EnvironmentsApiFp(this.configuration).getEnvironments(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a project
         * @param {CreateProjectRequest} [createProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (createProjectRequest?: CreateProjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProject', 'id', id)
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List the current user\'s available projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a project
         * @param {CreateProjectRequest} [createProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(createProjectRequest?: CreateProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(createProjectRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProject(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProject(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List the current user\'s available projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjects(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Project>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjects(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a project
         * @param {CreateProjectRequest} [createProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(createProjectRequest?: CreateProjectRequest, options?: any): AxiosPromise<Project> {
            return localVarFp.createProject(createProjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(id: string, options?: any): AxiosPromise<Project> {
            return localVarFp.getProject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List the current user\'s available projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(options?: any): AxiosPromise<Array<Project>> {
            return localVarFp.getProjects(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * 
     * @summary Create a project
     * @param {CreateProjectRequest} [createProjectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public createProject(createProjectRequest?: CreateProjectRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).createProject(createProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a project
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProject(id: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getProject(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List the current user\'s available projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjects(options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getProjects(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectsEnvironmentsApi - axios parameter creator
 * @export
 */
export const ProjectsEnvironmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List project environment
         * @param {string} projectId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectEnvironment: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectEnvironment', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProjectEnvironment', 'id', id)
            const localVarPath = `/projects/{project_id}/environments/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List project environments
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectEnvironments: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectEnvironments', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}/environments`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsEnvironmentsApi - functional programming interface
 * @export
 */
export const ProjectsEnvironmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsEnvironmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List project environment
         * @param {string} projectId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectEnvironment(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectEnvironment(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List project environments
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectEnvironments(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Environment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectEnvironments(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectsEnvironmentsApi - factory interface
 * @export
 */
export const ProjectsEnvironmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsEnvironmentsApiFp(configuration)
    return {
        /**
         * 
         * @summary List project environment
         * @param {string} projectId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectEnvironment(projectId: string, id: string, options?: any): AxiosPromise<Environment> {
            return localVarFp.getProjectEnvironment(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List project environments
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectEnvironments(projectId: string, options?: any): AxiosPromise<Array<Environment>> {
            return localVarFp.getProjectEnvironments(projectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsEnvironmentsApi - object-oriented interface
 * @export
 * @class ProjectsEnvironmentsApi
 * @extends {BaseAPI}
 */
export class ProjectsEnvironmentsApi extends BaseAPI {
    /**
     * 
     * @summary List project environment
     * @param {string} projectId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsEnvironmentsApi
     */
    public getProjectEnvironment(projectId: string, id: string, options?: AxiosRequestConfig) {
        return ProjectsEnvironmentsApiFp(this.configuration).getProjectEnvironment(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List project environments
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsEnvironmentsApi
     */
    public getProjectEnvironments(projectId: string, options?: AxiosRequestConfig) {
        return ProjectsEnvironmentsApiFp(this.configuration).getProjectEnvironments(projectId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ResourcesApi - axios parameter creator
 * @export
 */
export const ResourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a resource
         * @param {string} environmentId 
         * @param {CreateResourceRequest} createResourceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResource: async (environmentId: string, createResourceRequest: CreateResourceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('createResource', 'environmentId', environmentId)
            // verify required parameter 'createResourceRequest' is not null or undefined
            assertParamExists('createResource', 'createResourceRequest', createResourceRequest)
            const localVarPath = `/environments/{environment_id}/resources`
                .replace(`{${"environment_id"}}`, encodeURIComponent(String(environmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createResourceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a resource
         * @param {string} id 
         * @param {string} environmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResource: async (id: string, environmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteResource', 'id', id)
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('deleteResource', 'environmentId', environmentId)
            const localVarPath = `/environments/{environment_id}/resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"environment_id"}}`, encodeURIComponent(String(environmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a resource
         * @param {string} id 
         * @param {string} environmentId 
         * @param {string} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResource: async (id: string, environmentId: string, version?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getResource', 'id', id)
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('getResource', 'environmentId', environmentId)
            const localVarPath = `/environments/{environment_id}/resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"environment_id"}}`, encodeURIComponent(String(environmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get resource versions
         * @param {string} id 
         * @param {string} environmentId 
         * @param {string} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceVersions: async (id: string, environmentId: string, version?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getResourceVersions', 'id', id)
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('getResourceVersions', 'environmentId', environmentId)
            const localVarPath = `/environments/{environment_id}/resources/{id}/versions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"environment_id"}}`, encodeURIComponent(String(environmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List resources for an environment
         * @param {string} environmentId 
         * @param {number} [page] 
         * @param {string} [contentType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResources: async (environmentId: string, page?: number, contentType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('getResources', 'environmentId', environmentId)
            const localVarPath = `/environments/{environment_id}/resources`
                .replace(`{${"environment_id"}}`, encodeURIComponent(String(environmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (contentType !== undefined) {
                localVarQueryParameter['content_type'] = contentType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a resource
         * @param {string} id 
         * @param {string} environmentId 
         * @param {UpdateResourceRequest} [updateResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResource: async (id: string, environmentId: string, updateResourceRequest?: UpdateResourceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateResource', 'id', id)
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('updateResource', 'environmentId', environmentId)
            const localVarPath = `/environments/{environment_id}/resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"environment_id"}}`, encodeURIComponent(String(environmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateResourceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourcesApi - functional programming interface
 * @export
 */
export const ResourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a resource
         * @param {string} environmentId 
         * @param {CreateResourceRequest} createResourceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createResource(environmentId: string, createResourceRequest: CreateResourceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createResource(environmentId, createResourceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a resource
         * @param {string} id 
         * @param {string} environmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteResource(id: string, environmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResource(id, environmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a resource
         * @param {string} id 
         * @param {string} environmentId 
         * @param {string} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResource(id: string, environmentId: string, version?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResource(id, environmentId, version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get resource versions
         * @param {string} id 
         * @param {string} environmentId 
         * @param {string} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceVersions(id: string, environmentId: string, version?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Resource>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceVersions(id, environmentId, version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List resources for an environment
         * @param {string} environmentId 
         * @param {number} [page] 
         * @param {string} [contentType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResources(environmentId: string, page?: number, contentType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourcesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResources(environmentId, page, contentType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a resource
         * @param {string} id 
         * @param {string} environmentId 
         * @param {UpdateResourceRequest} [updateResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateResource(id: string, environmentId: string, updateResourceRequest?: UpdateResourceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateResource(id, environmentId, updateResourceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResourcesApi - factory interface
 * @export
 */
export const ResourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResourcesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a resource
         * @param {string} environmentId 
         * @param {CreateResourceRequest} createResourceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResource(environmentId: string, createResourceRequest: CreateResourceRequest, options?: any): AxiosPromise<Resource> {
            return localVarFp.createResource(environmentId, createResourceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a resource
         * @param {string} id 
         * @param {string} environmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResource(id: string, environmentId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteResource(id, environmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a resource
         * @param {string} id 
         * @param {string} environmentId 
         * @param {string} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResource(id: string, environmentId: string, version?: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.getResource(id, environmentId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get resource versions
         * @param {string} id 
         * @param {string} environmentId 
         * @param {string} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceVersions(id: string, environmentId: string, version?: string, options?: any): AxiosPromise<Array<Resource>> {
            return localVarFp.getResourceVersions(id, environmentId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List resources for an environment
         * @param {string} environmentId 
         * @param {number} [page] 
         * @param {string} [contentType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResources(environmentId: string, page?: number, contentType?: string, options?: any): AxiosPromise<ResourcesResponse> {
            return localVarFp.getResources(environmentId, page, contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a resource
         * @param {string} id 
         * @param {string} environmentId 
         * @param {UpdateResourceRequest} [updateResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResource(id: string, environmentId: string, updateResourceRequest?: UpdateResourceRequest, options?: any): AxiosPromise<Resource> {
            return localVarFp.updateResource(id, environmentId, updateResourceRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResourcesApi - object-oriented interface
 * @export
 * @class ResourcesApi
 * @extends {BaseAPI}
 */
export class ResourcesApi extends BaseAPI {
    /**
     * 
     * @summary Create a resource
     * @param {string} environmentId 
     * @param {CreateResourceRequest} createResourceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public createResource(environmentId: string, createResourceRequest: CreateResourceRequest, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).createResource(environmentId, createResourceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a resource
     * @param {string} id 
     * @param {string} environmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public deleteResource(id: string, environmentId: string, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).deleteResource(id, environmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a resource
     * @param {string} id 
     * @param {string} environmentId 
     * @param {string} [version] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public getResource(id: string, environmentId: string, version?: string, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).getResource(id, environmentId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get resource versions
     * @param {string} id 
     * @param {string} environmentId 
     * @param {string} [version] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public getResourceVersions(id: string, environmentId: string, version?: string, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).getResourceVersions(id, environmentId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List resources for an environment
     * @param {string} environmentId 
     * @param {number} [page] 
     * @param {string} [contentType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public getResources(environmentId: string, page?: number, contentType?: string, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).getResources(environmentId, page, contentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a resource
     * @param {string} id 
     * @param {string} environmentId 
     * @param {UpdateResourceRequest} [updateResourceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public updateResource(id: string, environmentId: string, updateResourceRequest?: UpdateResourceRequest, options?: AxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).updateResource(id, environmentId, updateResourceRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SchemasApi - axios parameter creator
 * @export
 */
export const SchemasApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a schema
         * @param {string} projectId 
         * @param {string} [lastSchemaVersion] 
         * @param {CreateSchemaRequest} [createSchemaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSchema: async (projectId: string, lastSchemaVersion?: string, createSchemaRequest?: CreateSchemaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('createSchema', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}/schemas`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (lastSchemaVersion !== undefined) {
                localVarQueryParameter['last_schema_version'] = lastSchemaVersion;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSchemaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a schema
         * @param {string} id 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchema: async (id: string, projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSchema', 'id', id)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getSchema', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}/schemas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List project schemas
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchemas: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getSchemas', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}/schemas`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchemasApi - functional programming interface
 * @export
 */
export const SchemasApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchemasApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a schema
         * @param {string} projectId 
         * @param {string} [lastSchemaVersion] 
         * @param {CreateSchemaRequest} [createSchemaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSchema(projectId: string, lastSchemaVersion?: string, createSchemaRequest?: CreateSchemaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSchema(projectId, lastSchemaVersion, createSchemaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a schema
         * @param {string} id 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchema(id: string, projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemaExtended>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchema(id, projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List project schemas
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchemas(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Schema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchemas(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SchemasApi - factory interface
 * @export
 */
export const SchemasApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchemasApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a schema
         * @param {string} projectId 
         * @param {string} [lastSchemaVersion] 
         * @param {CreateSchemaRequest} [createSchemaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSchema(projectId: string, lastSchemaVersion?: string, createSchemaRequest?: CreateSchemaRequest, options?: any): AxiosPromise<Schema> {
            return localVarFp.createSchema(projectId, lastSchemaVersion, createSchemaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a schema
         * @param {string} id 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchema(id: string, projectId: string, options?: any): AxiosPromise<SchemaExtended> {
            return localVarFp.getSchema(id, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List project schemas
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchemas(projectId: string, options?: any): AxiosPromise<Array<Schema>> {
            return localVarFp.getSchemas(projectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchemasApi - object-oriented interface
 * @export
 * @class SchemasApi
 * @extends {BaseAPI}
 */
export class SchemasApi extends BaseAPI {
    /**
     * 
     * @summary Create a schema
     * @param {string} projectId 
     * @param {string} [lastSchemaVersion] 
     * @param {CreateSchemaRequest} [createSchemaRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    public createSchema(projectId: string, lastSchemaVersion?: string, createSchemaRequest?: CreateSchemaRequest, options?: AxiosRequestConfig) {
        return SchemasApiFp(this.configuration).createSchema(projectId, lastSchemaVersion, createSchemaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a schema
     * @param {string} id 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    public getSchema(id: string, projectId: string, options?: AxiosRequestConfig) {
        return SchemasApiFp(this.configuration).getSchema(id, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List project schemas
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApi
     */
    public getSchemas(projectId: string, options?: AxiosRequestConfig) {
        return SchemasApiFp(this.configuration).getSchemas(projectId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve information about the signed in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve information about the signed in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve information about the signed in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options?: any): AxiosPromise<User> {
            return localVarFp.getUser(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve information about the signed in user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUser(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }
}


